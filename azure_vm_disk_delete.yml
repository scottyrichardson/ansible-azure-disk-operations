---
- name: Detach and delete disk from Azure VM
  hosts: localhost
  gather_facts: false
  vars:
    resource_group: "disk-resource-group"
    disk_name: "specific-disk-name-to-remove" # Set this to the exact disk name
    delete_disk: true # Set to false if you only want to detach but not delete

  tasks:
    - name: Get Resource Group information
      azure.azcollection.azure_rm_resourcegroup_info:
        name: "{{ resource_group }}"
      register: rg_info

    - name: Get Subscription ID
      ansible.builtin.set_fact:
        subscription_id: "{{ rg_info.resourcegroups[0].id.split('/')[2] }}"

    - name: Login to Azure CLI
      ansible.builtin.command: >
        az login --service-principal
        -u {{ lookup('env', 'AZURE_CLIENT_ID') }}
        -p '{{ lookup('env', 'AZURE_SECRET') }}'
        --tenant "{{ lookup('env', 'AZURE_TENANT') }}"
      no_log: true
      changed_when: false

    - name: Set Azure subscription
      ansible.builtin.command: >
        az account set --subscription "{{ subscription_id }}"
      no_log: true
      changed_when: false

    - name: Check if disk exists
      azure.azcollection.azure_rm_manageddisk_info:
        resource_group: "{{ resource_group }}"
        name: "{{ disk_name }}"
      register: disk_info
      failed_when: false

    - name: Fail if disk doesn't exist
      ansible.builtin.fail:
        msg: "Disk '{{ disk_name }}' not found in resource group '{{ resource_group }}'"
      when: disk_info.ansible_info.azure_managed_disk | length == 0

    - name: Extract VM name from managed_by field
      ansible.builtin.set_fact:
        vm_name: "{{ disk_info.ansible_info.azure_managed_disk[0].managed_by.split('/')[-1] if disk_info.ansible_info.azure_managed_disk[0].managed_by is not none else '' }}"

    - name: Display disk and VM information
      ansible.builtin.debug:
        msg:
          - "Disk '{{ disk_name }}' found in resource group"
          - "Disk ID: {{ disk_info.ansible_info.azure_managed_disk[0].id }}"
          - "Attached to VM: {{ vm_name if vm_name != '' else 'Not attached' }}"

    - name: Get VM configuration (if attached)
      azure.azcollection.azure_rm_virtualmachine_info:
        resource_group: "{{ resource_group }}"
        name: "{{ vm_name }}"
      register: vm_info
      when: vm_name != ''

    - name: Detach disk from VM
      ansible.builtin.command: >
        az vm disk detach
        --resource-group "{{ resource_group }}"
        --vm-name "{{ vm_name }}"
        --name "{{ disk_name }}"
      register: detach_result
      changed_when: true
      when: vm_name != ''

    - name: Display detach result
      ansible.builtin.debug:
        msg: "Disk '{{ disk_name }}' successfully detached from VM '{{ vm_name }}'"
      when: vm_name != ''

    - name: Skip detach (disk not attached)
      ansible.builtin.debug:
        msg: "Disk '{{ disk_name }}' is not attached to any VM, skipping detach"
      when: vm_name == ''

    - name: Delete the disk
      ansible.builtin.command: >
        az disk delete
        --resource-group "{{ resource_group }}"
        --name "{{ disk_name }}"
        --yes
      register: delete_result
      changed_when: true
      when: delete_disk

    - name: Display deletion result
      ansible.builtin.debug:
        msg: "Disk '{{ disk_name }}' successfully deleted"
      when: delete_disk

    - name: Skip deletion (delete_disk is false)
      ansible.builtin.debug:
        msg: "Disk '{{ disk_name }}' detached but not deleted (delete_disk=false)"
      when: not delete_disk

    - name: Final status
      ansible.builtin.debug:
        msg:
          - "=== Cleanup Complete ==="
          - "Disk: {{ disk_name }}"
          - "VM: {{ vm_name if vm_name != '' else 'None (disk was unattached)' }}"
          - "Detached: {{ 'Yes' if vm_name != '' else 'Not needed' }}"
          - "Deleted: {{ 'Yes' if delete_disk else 'No' }}"
